name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # test:
  #   name: Test Python ${{ matrix.python-version }} on Linux
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: ['3.10', '3.11']

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   - name: Cache pip dependencies
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/pyproject.toml') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #       pip install -e .[dev]

  #   - name: Lint with flake8
  #     run: |
  #       # Stop the build if there are Python syntax errors or undefined names
  #       flake8 icenet/ scripts/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
  #       # Exit-zero treats all errors as warnings
  #       flake8 icenet/ scripts/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=79 --statistics

  #   - name: Type checking with mypy
  #     run: |
  #       mypy icenet/ --ignore-missing-imports

  #   - name: Format checking with black
  #     run: |
  #       black --check --diff icenet/ scripts/ tests/

  #   - name: Run basic tests
  #     run: |
  #       python -m pytest tests/ -v --tb=short

  #   - name: Test package installation
  #     run: |
  #       python -c "import icenet; print(f'IceNet version: {icenet.__version__}')"
  #       python -c "from icenet import IceNet, create_icenet; print('Import successful')"

  #   - name: Test CLI scripts
  #     run: |
  #       python scripts/train.py --help
  #       python scripts/launch_hpc_training.py --help

  #   - name: Test model creation and forward pass
  #     run: |
  #       python -c "
  #       import torch
  #       from icenet import create_icenet
  #       model = create_icenet(7, 16, 1)
  #       x = torch.randn(1, 7)
  #       output = model(x)
  #       print(f'Model test successful, output shape: {output.shape}')
  #       "

  #   - name: Test data preparation (if available)
  #     run: |
  #       python -c "
  #       from icenet.data import IceDataPreparer
  #       config = {'domain': {'pole': 'north', 'clean_data': True}}
  #       preparer = IceDataPreparer(config)
  #       print('Data preparation import successful')
  #       "

  # test-training:
  #   name: Test Training Pipeline
  #   runs-on: ubuntu-latest
  #   # needs: test  # Commented out since test job is disabled

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10'

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #       pip install -e .

  #   - name: Test training with synthetic data
  #     run: |
  #       python scripts/train.py --create-data --config configs/config.yaml
  #       # Check if model was saved
  #       ls -la models/ || echo "No models directory found"

  #   - name: Test HPC setup validation
  #     run: |
  #       python tests/test_hpc_setup.py --gpus 0  # Test CPU-only mode

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Verify Python version
      run: |
        python --version
        python -c "import sys; print(f'Python version: {sys.version}')"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]

    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r icenet/ -f json -o bandit-report.json || true

    - name: Check for common security issues
      run: |
        pip install safety
        safety check

    - name: Generate coverage report
      run: |
        pip install pytest-cov
        python -m pytest tests/ --cov=icenet --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality]  # Simplified dependencies

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Verify Python version
      run: |
        python --version
        python -c "import sys; print(f'Python version: {sys.version}')"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  # docker-test:
  #   name: Test in Docker
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'schedule'

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Test in Python 3.10 container
  #     run: |
  #       docker run --rm -v $PWD:/workspace -w /workspace python:3.10-slim bash -c "
  #         apt-get update && apt-get install -y gcc &&
  #         pip install -r requirements.txt &&
  #         pip install -e . &&
  #         python -c 'import icenet; print(f\"Success: {icenet.__version__}\")' &&
  #         python tests/test_hpc_setup.py --gpus 0
  #       "

  # documentation:
  #   name: Build Documentation
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10'

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #       pip install -e .
  #       pip install sphinx sphinx-rtd-theme

  #   - name: Check documentation links
  #     run: |
  #       # Check for broken internal links in markdown files
  #       find docs/ -name "*.md" -exec grep -l "http" {} \; || echo "No markdown files with links found"

  #   - name: Validate README
  #     run: |
  #       python -c "
  #       import re
  #       with open('README.md', 'r') as f:
  #           content = f.read()
  #       # Check for common README issues
  #       assert '# IceNet' in content, 'Missing main title'
  #       assert 'Installation' in content, 'Missing installation section'
  #       assert 'Quick Start' in content, 'Missing quick start section'
  #       print('README validation passed')
  #       "

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [code-quality, build-package]  # Simplified dependencies
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Verify Python version
      run: |
        python --version
        python -c "import sys; print(f'Python version: {sys.version}')"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    # Uncomment to publish to PyPI (requires PYPI_API_TOKEN secret)
    # - name: Publish to PyPI
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: |
    #     twine upload dist/*
